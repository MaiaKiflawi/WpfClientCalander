//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfClientCalander.ServiceCalander {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="CityList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="City")]
    [System.SerializableAttribute()]
    public class CityList : System.Collections.Generic.List<WpfClientCalander.ServiceCalander.City> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class City : WpfClientCalander.ServiceCalander.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WpfClientCalander.ServiceCalander.Event))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WpfClientCalander.ServiceCalander.Groups))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WpfClientCalander.ServiceCalander.Users))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WpfClientCalander.ServiceCalander.City))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Event : WpfClientCalander.ServiceCalander.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WpfClientCalander.ServiceCalander.Groups EventGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventStartField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventEnd {
            get {
                return this.EventEndField;
            }
            set {
                if ((this.EventEndField.Equals(value) != true)) {
                    this.EventEndField = value;
                    this.RaisePropertyChanged("EventEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WpfClientCalander.ServiceCalander.Groups EventGroup {
            get {
                return this.EventGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.EventGroupField, value) != true)) {
                    this.EventGroupField = value;
                    this.RaisePropertyChanged("EventGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName {
            get {
                return this.EventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNameField, value) != true)) {
                    this.EventNameField = value;
                    this.RaisePropertyChanged("EventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventStart {
            get {
                return this.EventStartField;
            }
            set {
                if ((this.EventStartField.Equals(value) != true)) {
                    this.EventStartField = value;
                    this.RaisePropertyChanged("EventStart");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Groups", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Groups : WpfClientCalander.ServiceCalander.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WpfClientCalander.ServiceCalander.Users GroupAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WpfClientCalander.ServiceCalander.UsersList UsersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WpfClientCalander.ServiceCalander.Users GroupAdmin {
            get {
                return this.GroupAdminField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupAdminField, value) != true)) {
                    this.GroupAdminField = value;
                    this.RaisePropertyChanged("GroupAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupDescription {
            get {
                return this.GroupDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupDescriptionField, value) != true)) {
                    this.GroupDescriptionField = value;
                    this.RaisePropertyChanged("GroupDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WpfClientCalander.ServiceCalander.UsersList Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Users : WpfClientCalander.ServiceCalander.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WpfClientCalander.ServiceCalander.City CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGroupAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsManagerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BDate {
            get {
                return this.BDateField;
            }
            set {
                if ((this.BDateField.Equals(value) != true)) {
                    this.BDateField = value;
                    this.RaisePropertyChanged("BDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WpfClientCalander.ServiceCalander.City CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGroupAdmin {
            get {
                return this.IsGroupAdminField;
            }
            set {
                if ((this.IsGroupAdminField.Equals(value) != true)) {
                    this.IsGroupAdminField = value;
                    this.RaisePropertyChanged("IsGroupAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsManager {
            get {
                return this.IsManagerField;
            }
            set {
                if ((this.IsManagerField.Equals(value) != true)) {
                    this.IsManagerField = value;
                    this.RaisePropertyChanged("IsManager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UsersList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Users")]
    [System.SerializableAttribute()]
    public class UsersList : System.Collections.Generic.List<WpfClientCalander.ServiceCalander.Users> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="EventList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Event")]
    [System.SerializableAttribute()]
    public class EventList : System.Collections.Generic.List<WpfClientCalander.ServiceCalander.Event> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="GroupsList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Groups")]
    [System.SerializableAttribute()]
    public class GroupsList : System.Collections.Generic.List<WpfClientCalander.ServiceCalander.Groups> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCalander.ICalanderService")]
    public interface ICalanderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllCities", ReplyAction="http://tempuri.org/ICalanderService/GetAllCitiesResponse")]
        WpfClientCalander.ServiceCalander.CityList GetAllCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllCities", ReplyAction="http://tempuri.org/ICalanderService/GetAllCitiesResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.CityList> GetAllCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertCity", ReplyAction="http://tempuri.org/ICalanderService/InsertCityResponse")]
        int InsertCity(WpfClientCalander.ServiceCalander.City city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertCity", ReplyAction="http://tempuri.org/ICalanderService/InsertCityResponse")]
        System.Threading.Tasks.Task<int> InsertCityAsync(WpfClientCalander.ServiceCalander.City city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateCity", ReplyAction="http://tempuri.org/ICalanderService/UpdateCityResponse")]
        int UpdateCity(WpfClientCalander.ServiceCalander.City city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateCity", ReplyAction="http://tempuri.org/ICalanderService/UpdateCityResponse")]
        System.Threading.Tasks.Task<int> UpdateCityAsync(WpfClientCalander.ServiceCalander.City city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteCity", ReplyAction="http://tempuri.org/ICalanderService/DeleteCityResponse")]
        int DeleteCity(WpfClientCalander.ServiceCalander.City city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteCity", ReplyAction="http://tempuri.org/ICalanderService/DeleteCityResponse")]
        System.Threading.Tasks.Task<int> DeleteCityAsync(WpfClientCalander.ServiceCalander.City city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateCitiesFromExternalData", ReplyAction="http://tempuri.org/ICalanderService/UpdateCitiesFromExternalDataResponse")]
        void UpdateCitiesFromExternalData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateCitiesFromExternalData", ReplyAction="http://tempuri.org/ICalanderService/UpdateCitiesFromExternalDataResponse")]
        System.Threading.Tasks.Task UpdateCitiesFromExternalDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllEvents", ReplyAction="http://tempuri.org/ICalanderService/GetAllEventsResponse")]
        WpfClientCalander.ServiceCalander.EventList GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllEvents", ReplyAction="http://tempuri.org/ICalanderService/GetAllEventsResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.EventList> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertEvent", ReplyAction="http://tempuri.org/ICalanderService/InsertEventResponse")]
        int InsertEvent(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertEvent", ReplyAction="http://tempuri.org/ICalanderService/InsertEventResponse")]
        System.Threading.Tasks.Task<int> InsertEventAsync(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateEvent", ReplyAction="http://tempuri.org/ICalanderService/UpdateEventResponse")]
        int UpdateEvent(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateEvent", ReplyAction="http://tempuri.org/ICalanderService/UpdateEventResponse")]
        System.Threading.Tasks.Task<int> UpdateEventAsync(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteEvent", ReplyAction="http://tempuri.org/ICalanderService/DeleteEventResponse")]
        int DeleteEvent(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteEvent", ReplyAction="http://tempuri.org/ICalanderService/DeleteEventResponse")]
        System.Threading.Tasks.Task<int> DeleteEventAsync(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetEventsByUser", ReplyAction="http://tempuri.org/ICalanderService/GetEventsByUserResponse")]
        WpfClientCalander.ServiceCalander.EventList GetEventsByUser(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetEventsByUser", ReplyAction="http://tempuri.org/ICalanderService/GetEventsByUserResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.EventList> GetEventsByUserAsync(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetEventsByGroup", ReplyAction="http://tempuri.org/ICalanderService/GetEventsByGroupResponse")]
        WpfClientCalander.ServiceCalander.EventList GetEventsByGroup(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetEventsByGroup", ReplyAction="http://tempuri.org/ICalanderService/GetEventsByGroupResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.EventList> GetEventsByGroupAsync(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllGroups", ReplyAction="http://tempuri.org/ICalanderService/GetAllGroupsResponse")]
        WpfClientCalander.ServiceCalander.GroupsList GetAllGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllGroups", ReplyAction="http://tempuri.org/ICalanderService/GetAllGroupsResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.GroupsList> GetAllGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertGroup", ReplyAction="http://tempuri.org/ICalanderService/InsertGroupResponse")]
        int InsertGroup(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertGroup", ReplyAction="http://tempuri.org/ICalanderService/InsertGroupResponse")]
        System.Threading.Tasks.Task<int> InsertGroupAsync(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateGroup", ReplyAction="http://tempuri.org/ICalanderService/UpdateGroupResponse")]
        int UpdateGroup(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateGroup", ReplyAction="http://tempuri.org/ICalanderService/UpdateGroupResponse")]
        System.Threading.Tasks.Task<int> UpdateGroupAsync(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteGroup", ReplyAction="http://tempuri.org/ICalanderService/DeleteGroupResponse")]
        int DeleteGroup(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteGroup", ReplyAction="http://tempuri.org/ICalanderService/DeleteGroupResponse")]
        System.Threading.Tasks.Task<int> DeleteGroupAsync(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetGroupsByUser", ReplyAction="http://tempuri.org/ICalanderService/GetGroupsByUserResponse")]
        WpfClientCalander.ServiceCalander.GroupsList GetGroupsByUser(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetGroupsByUser", ReplyAction="http://tempuri.org/ICalanderService/GetGroupsByUserResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.GroupsList> GetGroupsByUserAsync(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/IsGroupNameFree", ReplyAction="http://tempuri.org/ICalanderService/IsGroupNameFreeResponse")]
        bool IsGroupNameFree(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/IsGroupNameFree", ReplyAction="http://tempuri.org/ICalanderService/IsGroupNameFreeResponse")]
        System.Threading.Tasks.Task<bool> IsGroupNameFreeAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetGroupByID", ReplyAction="http://tempuri.org/ICalanderService/GetGroupByIDResponse")]
        WpfClientCalander.ServiceCalander.Groups GetGroupByID(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetGroupByID", ReplyAction="http://tempuri.org/ICalanderService/GetGroupByIDResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.Groups> GetGroupByIDAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetGroupByGroupName", ReplyAction="http://tempuri.org/ICalanderService/GetGroupByGroupNameResponse")]
        WpfClientCalander.ServiceCalander.Groups GetGroupByGroupName(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetGroupByGroupName", ReplyAction="http://tempuri.org/ICalanderService/GetGroupByGroupNameResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.Groups> GetGroupByGroupNameAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllUsers", ReplyAction="http://tempuri.org/ICalanderService/GetAllUsersResponse")]
        WpfClientCalander.ServiceCalander.UsersList GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetAllUsers", ReplyAction="http://tempuri.org/ICalanderService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.UsersList> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertUser", ReplyAction="http://tempuri.org/ICalanderService/InsertUserResponse")]
        int InsertUser(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertUser", ReplyAction="http://tempuri.org/ICalanderService/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateUser", ReplyAction="http://tempuri.org/ICalanderService/UpdateUserResponse")]
        int UpdateUser(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/UpdateUser", ReplyAction="http://tempuri.org/ICalanderService/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteUser", ReplyAction="http://tempuri.org/ICalanderService/DeleteUserResponse")]
        int DeleteUser(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteUser", ReplyAction="http://tempuri.org/ICalanderService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetUsersByGroup", ReplyAction="http://tempuri.org/ICalanderService/GetUsersByGroupResponse")]
        WpfClientCalander.ServiceCalander.UsersList GetUsersByGroup(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetUsersByGroup", ReplyAction="http://tempuri.org/ICalanderService/GetUsersByGroupResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.UsersList> GetUsersByGroupAsync(WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetUsersByEvent", ReplyAction="http://tempuri.org/ICalanderService/GetUsersByEventResponse")]
        WpfClientCalander.ServiceCalander.UsersList GetUsersByEvent(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/GetUsersByEvent", ReplyAction="http://tempuri.org/ICalanderService/GetUsersByEventResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.UsersList> GetUsersByEventAsync(WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/Login", ReplyAction="http://tempuri.org/ICalanderService/LoginResponse")]
        WpfClientCalander.ServiceCalander.Users Login(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/Login", ReplyAction="http://tempuri.org/ICalanderService/LoginResponse")]
        System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.Users> LoginAsync(WpfClientCalander.ServiceCalander.Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/IsUsernameFree", ReplyAction="http://tempuri.org/ICalanderService/IsUsernameFreeResponse")]
        bool IsUsernameFree(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/IsUsernameFree", ReplyAction="http://tempuri.org/ICalanderService/IsUsernameFreeResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameFreeAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertUserToGroup", ReplyAction="http://tempuri.org/ICalanderService/InsertUserToGroupResponse")]
        int InsertUserToGroup(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertUserToGroup", ReplyAction="http://tempuri.org/ICalanderService/InsertUserToGroupResponse")]
        System.Threading.Tasks.Task<int> InsertUserToGroupAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteUserFromGroup", ReplyAction="http://tempuri.org/ICalanderService/DeleteUserFromGroupResponse")]
        int DeleteUserFromGroup(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteUserFromGroup", ReplyAction="http://tempuri.org/ICalanderService/DeleteUserFromGroupResponse")]
        System.Threading.Tasks.Task<int> DeleteUserFromGroupAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertUserToEvent", ReplyAction="http://tempuri.org/ICalanderService/InsertUserToEventResponse")]
        int InsertUserToEvent(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/InsertUserToEvent", ReplyAction="http://tempuri.org/ICalanderService/InsertUserToEventResponse")]
        System.Threading.Tasks.Task<int> InsertUserToEventAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteUserFromEvent", ReplyAction="http://tempuri.org/ICalanderService/DeleteUserFromEventResponse")]
        int DeleteUserFromEvent(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalanderService/DeleteUserFromEvent", ReplyAction="http://tempuri.org/ICalanderService/DeleteUserFromEventResponse")]
        System.Threading.Tasks.Task<int> DeleteUserFromEventAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalanderServiceChannel : WpfClientCalander.ServiceCalander.ICalanderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalanderServiceClient : System.ServiceModel.ClientBase<WpfClientCalander.ServiceCalander.ICalanderService>, WpfClientCalander.ServiceCalander.ICalanderService {
        
        public CalanderServiceClient() {
        }
        
        public CalanderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalanderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalanderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalanderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WpfClientCalander.ServiceCalander.CityList GetAllCities() {
            return base.Channel.GetAllCities();
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.CityList> GetAllCitiesAsync() {
            return base.Channel.GetAllCitiesAsync();
        }
        
        public int InsertCity(WpfClientCalander.ServiceCalander.City city) {
            return base.Channel.InsertCity(city);
        }
        
        public System.Threading.Tasks.Task<int> InsertCityAsync(WpfClientCalander.ServiceCalander.City city) {
            return base.Channel.InsertCityAsync(city);
        }
        
        public int UpdateCity(WpfClientCalander.ServiceCalander.City city) {
            return base.Channel.UpdateCity(city);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCityAsync(WpfClientCalander.ServiceCalander.City city) {
            return base.Channel.UpdateCityAsync(city);
        }
        
        public int DeleteCity(WpfClientCalander.ServiceCalander.City city) {
            return base.Channel.DeleteCity(city);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCityAsync(WpfClientCalander.ServiceCalander.City city) {
            return base.Channel.DeleteCityAsync(city);
        }
        
        public void UpdateCitiesFromExternalData() {
            base.Channel.UpdateCitiesFromExternalData();
        }
        
        public System.Threading.Tasks.Task UpdateCitiesFromExternalDataAsync() {
            return base.Channel.UpdateCitiesFromExternalDataAsync();
        }
        
        public WpfClientCalander.ServiceCalander.EventList GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.EventList> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
        
        public int InsertEvent(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.InsertEvent(events);
        }
        
        public System.Threading.Tasks.Task<int> InsertEventAsync(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.InsertEventAsync(events);
        }
        
        public int UpdateEvent(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.UpdateEvent(events);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEventAsync(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.UpdateEventAsync(events);
        }
        
        public int DeleteEvent(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.DeleteEvent(events);
        }
        
        public System.Threading.Tasks.Task<int> DeleteEventAsync(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.DeleteEventAsync(events);
        }
        
        public WpfClientCalander.ServiceCalander.EventList GetEventsByUser(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.GetEventsByUser(user);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.EventList> GetEventsByUserAsync(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.GetEventsByUserAsync(user);
        }
        
        public WpfClientCalander.ServiceCalander.EventList GetEventsByGroup(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.GetEventsByGroup(group);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.EventList> GetEventsByGroupAsync(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.GetEventsByGroupAsync(group);
        }
        
        public WpfClientCalander.ServiceCalander.GroupsList GetAllGroups() {
            return base.Channel.GetAllGroups();
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.GroupsList> GetAllGroupsAsync() {
            return base.Channel.GetAllGroupsAsync();
        }
        
        public int InsertGroup(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.InsertGroup(group);
        }
        
        public System.Threading.Tasks.Task<int> InsertGroupAsync(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.InsertGroupAsync(group);
        }
        
        public int UpdateGroup(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.UpdateGroup(group);
        }
        
        public System.Threading.Tasks.Task<int> UpdateGroupAsync(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.UpdateGroupAsync(group);
        }
        
        public int DeleteGroup(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.DeleteGroup(group);
        }
        
        public System.Threading.Tasks.Task<int> DeleteGroupAsync(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.DeleteGroupAsync(group);
        }
        
        public WpfClientCalander.ServiceCalander.GroupsList GetGroupsByUser(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.GetGroupsByUser(user);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.GroupsList> GetGroupsByUserAsync(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.GetGroupsByUserAsync(user);
        }
        
        public bool IsGroupNameFree(string groupName) {
            return base.Channel.IsGroupNameFree(groupName);
        }
        
        public System.Threading.Tasks.Task<bool> IsGroupNameFreeAsync(string groupName) {
            return base.Channel.IsGroupNameFreeAsync(groupName);
        }
        
        public WpfClientCalander.ServiceCalander.Groups GetGroupByID(int Id) {
            return base.Channel.GetGroupByID(Id);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.Groups> GetGroupByIDAsync(int Id) {
            return base.Channel.GetGroupByIDAsync(Id);
        }
        
        public WpfClientCalander.ServiceCalander.Groups GetGroupByGroupName(string groupName) {
            return base.Channel.GetGroupByGroupName(groupName);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.Groups> GetGroupByGroupNameAsync(string groupName) {
            return base.Channel.GetGroupByGroupNameAsync(groupName);
        }
        
        public WpfClientCalander.ServiceCalander.UsersList GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.UsersList> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public int InsertUser(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public int UpdateUser(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public int DeleteUser(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public WpfClientCalander.ServiceCalander.UsersList GetUsersByGroup(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.GetUsersByGroup(group);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.UsersList> GetUsersByGroupAsync(WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.GetUsersByGroupAsync(group);
        }
        
        public WpfClientCalander.ServiceCalander.UsersList GetUsersByEvent(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.GetUsersByEvent(events);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.UsersList> GetUsersByEventAsync(WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.GetUsersByEventAsync(events);
        }
        
        public WpfClientCalander.ServiceCalander.Users Login(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<WpfClientCalander.ServiceCalander.Users> LoginAsync(WpfClientCalander.ServiceCalander.Users user) {
            return base.Channel.LoginAsync(user);
        }
        
        public bool IsUsernameFree(string username) {
            return base.Channel.IsUsernameFree(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameFreeAsync(string username) {
            return base.Channel.IsUsernameFreeAsync(username);
        }
        
        public int InsertUserToGroup(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.InsertUserToGroup(user, group);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserToGroupAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.InsertUserToGroupAsync(user, group);
        }
        
        public int DeleteUserFromGroup(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.DeleteUserFromGroup(user, group);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserFromGroupAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Groups group) {
            return base.Channel.DeleteUserFromGroupAsync(user, group);
        }
        
        public int InsertUserToEvent(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.InsertUserToEvent(user, events);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserToEventAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.InsertUserToEventAsync(user, events);
        }
        
        public int DeleteUserFromEvent(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.DeleteUserFromEvent(user, events);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserFromEventAsync(WpfClientCalander.ServiceCalander.Users user, WpfClientCalander.ServiceCalander.Event events) {
            return base.Channel.DeleteUserFromEventAsync(user, events);
        }
    }
}
